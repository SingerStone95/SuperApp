apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.didiglobal.booster'
android {
    compileSdk(Integer.valueOf(BUILD_SDK_VERSION))
    defaultConfig {
        applicationId "singerstone.com.superapp"
        minSdkVersion Integer.valueOf(MIN_SDK_VERSION)
        targetSdkVersion Integer.valueOf(TARGET_SDK_VERSION)
        versionCode 1
        multiDexEnabled true
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters 'armeabi-v7a'
        }
//        javaCompileOptions {
//            annotationProcessorOptions {
//                includeCompileClasspath true
//            }
//        }
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility 1.8 //表示生成的 java 类版本是1.8，只能在运行在 >=1.8 的虚拟机
        sourceCompatibility "1.8" // 表示源代码里面可以应用 <= 1.8 版本的特性，sourceCompatibility无法高于targetCompatibility
    }

    packagingOptions {
        exclude "**/module-info.class"
        exclude 'DebugProbesKt.bin'
    }

    // 一定放在buildTypes上面，否则不生效
    signingConfigs {
        debug {
            try {
                storeFile file("../keystore/singerstone.jks")//这里替换成你自己项目生成的keystore的存储路径
                storePassword "cbh123456"
                keyAlias "singerstone"
                keyPassword "cbh123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        release {
            try {
                storeFile file("../keystore/singerstone.jks")//这里替换成你自己项目生成的keystore的存储路径
                storePassword "cbh123456"
                keyAlias "singerstone"
                keyPassword "cbh123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs', 'loglibs']
            aidl.srcDirs = ['src/main/AIDL']
            resources {
                srcDir {
                    "src/main/resources"
                }
            }
        }

    }
    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            zipAlignEnabled true
            pseudoLocalesEnabled true
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            zipAlignEnabled true
            pseudoLocalesEnabled true
            signingConfig signingConfigs.release
        }
    }

    /*externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
            //cmake {
            //    path 'NativeHook/jni/nh_air/jni/CMakeLists.txt'
        }
    }*/
}
//这样定义的task会在配置的时候执行
task doSomeRightThing {
    println(">>>>>>>>>>>>>>>app gradle insert task<<<<<<<<<<<<<<<<<<<<<")
}
//上面那句等同于这一句
println(">>>>>>>>>>>>>>>app gradle ⭐️ insert task<<<<<<<<<<<<<<<<<<<<<")

//这样定义能保证需要执行再执行
task doSomeLeftThing doLast {
    println(">>>>>>>>>>>>>>>app gradle insert task<<<<<<<<<<<<<<<<<<<<<")
}
task t1 {
    println 't1 configuration'
    doLast {
        println 't1 execute doLast'
    }
    doFirst {
        println 't1 execute doFirst'
    }
}

// 2.配置阶段
gradle.projectsEvaluated { project ->
    println '配置阶段 gradle.projectsEvaluated' + project
}
gradle.taskGraph.whenReady {
    println '配置阶段 gradle.taskGraph.whenReady'
}
// 3.执行阶段
gradle.taskGraph.beforeTask { task ->
    println "执行阶段 gradle.taskGraph.beforeTask >>>>>>>>>>" + task
}
gradle.taskGraph.afterTask { task ->
    println "执行阶段 gradle.taskGraph.afterTask <<<<<<<<<<" + task
}
// 4.build结束
gradle.buildFinished {
    println '构建结束 radle.buildFinished'
}

project.beforeEvaluate {
    println '配置阶段 project.beforeEvaluate >>>>>>>>>>'
}

project.afterEvaluate {
    println '配置阶段 project.afterEvaluate <<<<<<<<<<'
}

project.tasks.whenTaskAdded { Task theTask ->
    println('add task->' + theTask.getName())
    if (theTask.name == 'assembleDebug' || theTask.name == 'assembleRelease') {
    }
}


dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'androidx.recyclerview:recyclerview:1.1.0'
    api 'androidx.appcompat:appcompat:1.2.0'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "androidx.core:core-ktx:1.10.1"
    api 'androidx.appcompat:appcompat:1.2.0'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4"
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    api 'com.squareup.retrofit2:retrofit:2.8.1'
    api 'com.squareup.retrofit2:converter-gson:2.8.1'
    api 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    api 'com.squareup.okhttp3:okhttp:3.14.7'
    api 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.10'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'pl.droidsonroids.gif:android-gif-drawable:1.2.10'
    api 'com.github.bumptech.glide:glide:4.9.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    api 'org.javassist:javassist:3.25.0-GA'
    api project(':annotations')
    annotationProcessor project(':processors')
    api project(':inject')
    compileOnly 'com.android.tools.build:gradle:'+BUILD_TOOL_VERSION
    implementation "androidx.cardview:cardview:1.0.0"
    //xposed
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
    if (ENABLE_BTRACE == 'true') {
        implementation "com.bytedance.btrace:rhea-core:1.0.2"
    }
    compileOnly "com.didiglobal.booster:booster-gradle-plugin:$booster_version"
    compileOnly "com.didiglobal.booster:booster-transform-thread:$booster_version"
    compileOnly "com.didiglobal.booster:booster-task-list-shared-library:$booster_version"
    compileOnly "com.didiglobal.booster:booster-task-resource-deredundancy:$booster_version"

}
repositories {
    mavenCentral()
}
if (ENABLE_SUPERPLUGIN == 'true') {
    apply plugin: 'com.singerstone.supergradle'
}

if (ENABLE_BTRACE == 'true') {
    apply plugin: 'com.bytedance.rhea-trace'
    rheaTrace {

        compilation {
            //为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。
            traceWithMethodID = false
            //该文件配置决定哪些方法您不希望跟踪, 默认值 null。
            traceFilterFilePath = "${project.rootDir}/rhea-trace/traceFilter.txt"
            //用特指定方法 id 来设置自定义事件名称, 默认值 null。
            applyMethodMappingFilePath = "${project.rootDir}/rhea-trace/keep-method-id.txt"
        }

        runtime {
            //仅在主线程抓取跟踪事件, 默认值 false。
            mainThreadOnly true
            //在 App 启动之初开始抓取跟踪事件, 默认值 true。
            startWhenAppLaunch true
            //指定内存存储 atrace 数据 ring buffer 的大小。
            atraceBufferSize "500000"
        }
    }
}
